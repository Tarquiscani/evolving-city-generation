// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEMAP_TGM_SCHEMA_H_
#define FLATBUFFERS_GENERATED_GAMEMAP_TGM_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 22,
             "Non-compatible flatbuffers version included");

#include "tileset_generated.h"

namespace tgm {
namespace schema {

struct GameMap;
struct GameMapBuilder;

struct GameMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TILESET = 4
  };
  const tgm::schema::TileSet *tileset() const {
    return GetPointer<const tgm::schema::TileSet *>(VT_TILESET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TILESET) &&
           verifier.VerifyTable(tileset()) &&
           verifier.EndTable();
  }
};

struct GameMapBuilder {
  typedef GameMap Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tileset(flatbuffers::Offset<tgm::schema::TileSet> tileset) {
    fbb_.AddOffset(GameMap::VT_TILESET, tileset);
  }
  explicit GameMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GameMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameMap>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameMap> CreateGameMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<tgm::schema::TileSet> tileset = 0) {
  GameMapBuilder builder_(_fbb);
  builder_.add_tileset(tileset);
  return builder_.Finish();
}

inline const tgm::schema::GameMap *GetGameMap(const void *buf) {
  return flatbuffers::GetRoot<tgm::schema::GameMap>(buf);
}

inline const tgm::schema::GameMap *GetSizePrefixedGameMap(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tgm::schema::GameMap>(buf);
}

inline bool VerifyGameMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tgm::schema::GameMap>(nullptr);
}

inline bool VerifySizePrefixedGameMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tgm::schema::GameMap>(nullptr);
}

inline void FinishGameMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tgm::schema::GameMap> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tgm::schema::GameMap> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace tgm

#endif  // FLATBUFFERS_GENERATED_GAMEMAP_TGM_SCHEMA_H_
